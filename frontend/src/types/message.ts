// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.2
// source: src/proto/message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

/** Position struct */
export interface Position {
  x: number;
  y: number;
}

/** Bullet struct */
export interface Bullet {
  id: number;
  position: Position | undefined;
  rotation: number;
  expired: boolean;
}

/** Obstacle struct */
export interface Obstacle {
  x: number;
  y: number;
  width: number;
  height: number;
}

/** GrassPatch struct */
export interface GrassPatch {
  x: number;
  y: number;
  radius: number;
}

/** GameMap struct */
export interface GameMap {
  obstacles: Obstacle[];
  grassPatches: GrassPatch[];
}

/** Player struct */
export interface Player {
  id: number;
  name: string;
  color: string;
  position: Position | undefined;
  isReady: boolean;
  inGrass: boolean;
  rotation: number;
  kills: number;
  health: number;
}

/** Payload struct */
export interface Payload {
  players: Player[];
  position?: Position | undefined;
  bullet?: Bullet | undefined;
  map?: GameMap | undefined;
  isReady?: boolean | undefined;
  inGrass?: boolean | undefined;
  health?: number | undefined;
  rotation?: number | undefined;
  kills?: number | undefined;
}

/** Message struct */
export interface Message {
  id?: number | undefined;
  event: string;
  time: number;
  payload?: Payload | undefined;
}

function createBasePosition(): Position {
  return { x: 0, y: 0 };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(9).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(17).double(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.x = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.y = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseBullet(): Bullet {
  return { id: 0, position: undefined, rotation: 0, expired: false };
}

export const Bullet: MessageFns<Bullet> = {
  encode(message: Bullet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(9).double(message.id);
    }
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(18).fork()).join();
    }
    if (message.rotation !== 0) {
      writer.uint32(25).double(message.rotation);
    }
    if (message.expired !== false) {
      writer.uint32(32).bool(message.expired);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Bullet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBullet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.id = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.rotation = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expired = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Bullet {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      expired: isSet(object.expired) ? globalThis.Boolean(object.expired) : false,
    };
  },

  toJSON(message: Bullet): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = message.id;
    }
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    if (message.rotation !== 0) {
      obj.rotation = message.rotation;
    }
    if (message.expired !== false) {
      obj.expired = message.expired;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Bullet>, I>>(base?: I): Bullet {
    return Bullet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Bullet>, I>>(object: I): Bullet {
    const message = createBaseBullet();
    message.id = object.id ?? 0;
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    message.rotation = object.rotation ?? 0;
    message.expired = object.expired ?? false;
    return message;
  },
};

function createBaseObstacle(): Obstacle {
  return { x: 0, y: 0, width: 0, height: 0 };
}

export const Obstacle: MessageFns<Obstacle> = {
  encode(message: Obstacle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).uint32(message.y);
    }
    if (message.width !== 0) {
      writer.uint32(24).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(32).uint32(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Obstacle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObstacle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Obstacle {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: Obstacle): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Obstacle>, I>>(base?: I): Obstacle {
    return Obstacle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Obstacle>, I>>(object: I): Obstacle {
    const message = createBaseObstacle();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseGrassPatch(): GrassPatch {
  return { x: 0, y: 0, radius: 0 };
}

export const GrassPatch: MessageFns<GrassPatch> = {
  encode(message: GrassPatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).uint32(message.y);
    }
    if (message.radius !== 0) {
      writer.uint32(24).uint32(message.radius);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrassPatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrassPatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.radius = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrassPatch {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      radius: isSet(object.radius) ? globalThis.Number(object.radius) : 0,
    };
  },

  toJSON(message: GrassPatch): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.radius !== 0) {
      obj.radius = Math.round(message.radius);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrassPatch>, I>>(base?: I): GrassPatch {
    return GrassPatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrassPatch>, I>>(object: I): GrassPatch {
    const message = createBaseGrassPatch();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.radius = object.radius ?? 0;
    return message;
  },
};

function createBaseGameMap(): GameMap {
  return { obstacles: [], grassPatches: [] };
}

export const GameMap: MessageFns<GameMap> = {
  encode(message: GameMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.obstacles) {
      Obstacle.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.grassPatches) {
      GrassPatch.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.obstacles.push(Obstacle.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.grassPatches.push(GrassPatch.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameMap {
    return {
      obstacles: globalThis.Array.isArray(object?.obstacles)
        ? object.obstacles.map((e: any) => Obstacle.fromJSON(e))
        : [],
      grassPatches: globalThis.Array.isArray(object?.grassPatches)
        ? object.grassPatches.map((e: any) => GrassPatch.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GameMap): unknown {
    const obj: any = {};
    if (message.obstacles?.length) {
      obj.obstacles = message.obstacles.map((e) => Obstacle.toJSON(e));
    }
    if (message.grassPatches?.length) {
      obj.grassPatches = message.grassPatches.map((e) => GrassPatch.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameMap>, I>>(base?: I): GameMap {
    return GameMap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameMap>, I>>(object: I): GameMap {
    const message = createBaseGameMap();
    message.obstacles = object.obstacles?.map((e) => Obstacle.fromPartial(e)) || [];
    message.grassPatches = object.grassPatches?.map((e) => GrassPatch.fromPartial(e)) || [];
    return message;
  },
};

function createBasePlayer(): Player {
  return {
    id: 0,
    name: "",
    color: "",
    position: undefined,
    isReady: false,
    inGrass: false,
    rotation: 0,
    kills: 0,
    health: 0,
  };
}

export const Player: MessageFns<Player> = {
  encode(message: Player, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(34).fork()).join();
    }
    if (message.isReady !== false) {
      writer.uint32(40).bool(message.isReady);
    }
    if (message.inGrass !== false) {
      writer.uint32(48).bool(message.inGrass);
    }
    if (message.rotation !== 0) {
      writer.uint32(57).double(message.rotation);
    }
    if (message.kills !== 0) {
      writer.uint32(64).int32(message.kills);
    }
    if (message.health !== 0) {
      writer.uint32(72).int32(message.health);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Player {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isReady = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.inGrass = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.rotation = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.kills = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.health = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Player {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
      isReady: isSet(object.isReady) ? globalThis.Boolean(object.isReady) : false,
      inGrass: isSet(object.inGrass) ? globalThis.Boolean(object.inGrass) : false,
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      kills: isSet(object.kills) ? globalThis.Number(object.kills) : 0,
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
    };
  },

  toJSON(message: Player): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    if (message.isReady !== false) {
      obj.isReady = message.isReady;
    }
    if (message.inGrass !== false) {
      obj.inGrass = message.inGrass;
    }
    if (message.rotation !== 0) {
      obj.rotation = message.rotation;
    }
    if (message.kills !== 0) {
      obj.kills = Math.round(message.kills);
    }
    if (message.health !== 0) {
      obj.health = Math.round(message.health);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Player>, I>>(base?: I): Player {
    return Player.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Player>, I>>(object: I): Player {
    const message = createBasePlayer();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.color = object.color ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    message.isReady = object.isReady ?? false;
    message.inGrass = object.inGrass ?? false;
    message.rotation = object.rotation ?? 0;
    message.kills = object.kills ?? 0;
    message.health = object.health ?? 0;
    return message;
  },
};

function createBasePayload(): Payload {
  return {
    players: [],
    position: undefined,
    bullet: undefined,
    map: undefined,
    isReady: undefined,
    inGrass: undefined,
    health: undefined,
    rotation: undefined,
    kills: undefined,
  };
}

export const Payload: MessageFns<Payload> = {
  encode(message: Payload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.players) {
      Player.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.position !== undefined) {
      Position.encode(message.position, writer.uint32(18).fork()).join();
    }
    if (message.bullet !== undefined) {
      Bullet.encode(message.bullet, writer.uint32(26).fork()).join();
    }
    if (message.map !== undefined) {
      GameMap.encode(message.map, writer.uint32(34).fork()).join();
    }
    if (message.isReady !== undefined) {
      writer.uint32(40).bool(message.isReady);
    }
    if (message.inGrass !== undefined) {
      writer.uint32(48).bool(message.inGrass);
    }
    if (message.health !== undefined) {
      writer.uint32(56).int32(message.health);
    }
    if (message.rotation !== undefined) {
      writer.uint32(65).double(message.rotation);
    }
    if (message.kills !== undefined) {
      writer.uint32(72).int32(message.kills);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.players.push(Player.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.position = Position.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bullet = Bullet.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.map = GameMap.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isReady = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.inGrass = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.health = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.rotation = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.kills = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payload {
    return {
      players: globalThis.Array.isArray(object?.players) ? object.players.map((e: any) => Player.fromJSON(e)) : [],
      position: isSet(object.position) ? Position.fromJSON(object.position) : undefined,
      bullet: isSet(object.bullet) ? Bullet.fromJSON(object.bullet) : undefined,
      map: isSet(object.map) ? GameMap.fromJSON(object.map) : undefined,
      isReady: isSet(object.isReady) ? globalThis.Boolean(object.isReady) : undefined,
      inGrass: isSet(object.inGrass) ? globalThis.Boolean(object.inGrass) : undefined,
      health: isSet(object.health) ? globalThis.Number(object.health) : undefined,
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : undefined,
      kills: isSet(object.kills) ? globalThis.Number(object.kills) : undefined,
    };
  },

  toJSON(message: Payload): unknown {
    const obj: any = {};
    if (message.players?.length) {
      obj.players = message.players.map((e) => Player.toJSON(e));
    }
    if (message.position !== undefined) {
      obj.position = Position.toJSON(message.position);
    }
    if (message.bullet !== undefined) {
      obj.bullet = Bullet.toJSON(message.bullet);
    }
    if (message.map !== undefined) {
      obj.map = GameMap.toJSON(message.map);
    }
    if (message.isReady !== undefined) {
      obj.isReady = message.isReady;
    }
    if (message.inGrass !== undefined) {
      obj.inGrass = message.inGrass;
    }
    if (message.health !== undefined) {
      obj.health = Math.round(message.health);
    }
    if (message.rotation !== undefined) {
      obj.rotation = message.rotation;
    }
    if (message.kills !== undefined) {
      obj.kills = Math.round(message.kills);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payload>, I>>(base?: I): Payload {
    return Payload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payload>, I>>(object: I): Payload {
    const message = createBasePayload();
    message.players = object.players?.map((e) => Player.fromPartial(e)) || [];
    message.position = (object.position !== undefined && object.position !== null)
      ? Position.fromPartial(object.position)
      : undefined;
    message.bullet = (object.bullet !== undefined && object.bullet !== null)
      ? Bullet.fromPartial(object.bullet)
      : undefined;
    message.map = (object.map !== undefined && object.map !== null) ? GameMap.fromPartial(object.map) : undefined;
    message.isReady = object.isReady ?? undefined;
    message.inGrass = object.inGrass ?? undefined;
    message.health = object.health ?? undefined;
    message.rotation = object.rotation ?? undefined;
    message.kills = object.kills ?? undefined;
    return message;
  },
};

function createBaseMessage(): Message {
  return { id: undefined, event: "", time: 0, payload: undefined };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).int32(message.id);
    }
    if (message.event !== "") {
      writer.uint32(18).string(message.event);
    }
    if (message.time !== 0) {
      writer.uint32(24).uint64(message.time);
    }
    if (message.payload !== undefined) {
      Payload.encode(message.payload, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.event = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.time = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.payload = Payload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      event: isSet(object.event) ? globalThis.String(object.event) : "",
      time: isSet(object.time) ? globalThis.Number(object.time) : 0,
      payload: isSet(object.payload) ? Payload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.event !== "") {
      obj.event = message.event;
    }
    if (message.time !== 0) {
      obj.time = Math.round(message.time);
    }
    if (message.payload !== undefined) {
      obj.payload = Payload.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.id = object.id ?? undefined;
    message.event = object.event ?? "";
    message.time = object.time ?? 0;
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Payload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
